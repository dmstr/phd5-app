stages:
  - build
  - test
  - report
  - release
  - deploy
  - cleanup

variables:
  ISOLATION: "buildpipeline${CI_PIPELINE_ID}${CI_PROJECT_NAME}"
  COMPOSE_FILE: "./docker-compose.yml:./docker/docker-compose.dev.yml:./docker/docker-compose.test.yml:./docker/docker-compose.selenium.yml"
  STACK_PHP_IMAGE: "${PHP_IMAGE_NAME}:${CI_BUILD_REF}"

# ----------------------------------------------------------
# before/after scripts, these will be used in every job within the job-scope
# ----------------------------------------------------------
before_script:
  # set docker-compose isolation
  - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
  - pwd
  - docker version
  - docker-compose version
  - docker-compose config
  - echo ${ISOLATION}
  - echo $(git describe --always --dirty --tags)
  - export APP_VERSION=$(git describe --always --dirty --tags)
  - export REGISTRY_PHP_IMAGE=${PHP_IMAGE_NAME}:${APP_VERSION}

after_script:
  # set docker-compose isolation
  - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
  # run all commands from test environment
  - make clean

# ----------------------------------------------------------
# TEMPLATES
# ----------------------------------------------------------

# ----------------------------------------------------------
# templates which can be used in jobs with different flavours
.codeception_tmpl: &codeception_tmpl_ref
  stage: test
  script:
    - make test
  except:
    - coverage
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-codeception
    when: always
    expire_in: 4 weeks
    paths:
      - _host-volumes/tests-log


.lint_tmpl: &lint_tmpl_ref
  stage: test
  script:
    - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
    - make help
    - make lint
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-lint
    when: always
    expire_in: 4 weeks
    paths:
      - _host-volumes/tests-log


.coverage_tmpl: &coverage_tmpl_ref
  stage: test
  script:
    - export COMPOSE_PROJECT_NAME=${ISOLATION}${CI_BUILD_NAME}
    - make test-init
    - make test-coverage
  only:
    - coverage
  artifacts:
    name: ${CI_PROJECT_PATH}-p${CI_PIPELINE_ID}-coverage
    when: always
    expire_in: 4 weeks
    paths:
      - _host-volumes/tests-log


.release_tmpl: &release_tmpl_ref
  stage: release
  environment:
    name: image
  script:
    - docker login --username ${REGISTRY_USER} --password ${REGISTRY_PASS} ${REGISTRY_HOST}
    - make version build
    - docker tag ${STACK_PHP_IMAGE} ${REGISTRY_PHP_IMAGE}
    - docker push ${REGISTRY_PHP_IMAGE}
  only:
    - releases
    - tags


# ----------------------------------------------------------
# job definitions, they should use the defined job and flavour templates
# ----------------------------------------------------------
codeception-debian:
  <<: *codeception_tmpl_ref

# ----------------------------------------------------------
coverage-debian:
  <<: *coverage_tmpl_ref

# ----------------------------------------------------------
lint-debian:
  <<: *lint_tmpl_ref

# ----------------------------------------------------------
release-debian:
  <<: *release_tmpl_ref
